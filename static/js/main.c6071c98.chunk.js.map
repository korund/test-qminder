{"version":3,"sources":["components/App/logo.svg","components/Venue/Venue.js","components/App/BurgerMap/VenueMarker.js","components/App/BurgerMap/VenueInfo.js","components/App/BurgerMap/BurgerMap.js","components/App/BurgerMap/BurgerMapContainer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Venue","react_default","a","createElement","this","props","name","location","distance","lat","lng","Component","VenueMarker","_this","lib","position","onClick","openInfo","id","VenueInfo","options","pixelOffset","width","height","onCloseClick","closeInfo","className","Map","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentVenue","handleToggle","bind","assertThisInitialized","venueId","setState","venues","filter","venue","_this2","center","setLatLng","map","latitude","longitude","defaultZoom","radius","excludeRadius","fillColor","fillOpacity","strokeColor","strokeWeight","VenueInfo_VenueInfo","assign","VenueMarker_VenueMarker","key","BurgerMap","withScriptjs","withGoogleMap","BurgerMapContainer","App_BurgerMap_BurgerMap","googleMapURL","concat","apiKey","containerElement","loadingElement","mapElement","App","require","foursquareCredentials","getVenues","objectSpread","ll","venueRequest","then","data","response","sort","b","catch","reject","src","logo","alt","BurgerMapContainer_BurgerMapContainer","components_Venue_Venue","Boolean","window","hostname","match","ReactDOM","render","components_App_App","clientID","clientSecret","categoryId","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6071c98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nclass Venue extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>\r\n          Name: {this.props.name}, Distance: {this.props.location.distance}<br/>\r\n          Location: {this.props.location.lat}, {this.props.location.lng}\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Venue;","import React, {Component} from 'react'\r\nimport {Marker} from 'react-google-maps'\r\n\r\nexport default class VenueMarker extends Component {\r\n  render() {\r\n    return <Marker\r\n      position={this.props.location}\r\n      onClick={() => this.props.openInfo(this.props.id)}\r\n    />\r\n  }\r\n}","import React, {Component} from 'react'\r\nimport {InfoWindow} from 'react-google-maps'\r\n\r\nexport default class VenueInfo extends Component {\r\n  render() {\r\n    return <InfoWindow\r\n      position={this.props.location}\r\n      options={{\r\n        pixelOffset: {\r\n          width: 0,\r\n          height: -40\r\n        }\r\n      }}\r\n      onCloseClick={() => this.props.closeInfo(null)}\r\n    >\r\n      <div className={'VenueInfo'}>\r\n        <h1>{this.props.name}</h1>\r\n      </div>\r\n    </InfoWindow>\r\n  }\r\n}","import React, {Component} from 'react'\r\nimport {withScriptjs, withGoogleMap, GoogleMap, Circle} from 'react-google-maps'\r\nimport VenueMarker from './VenueMarker'\r\nimport VenueInfo from './VenueInfo'\r\nimport './BurgerMap.css'\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      currentVenue: null\r\n    }\r\n    this.handleToggle = this.handleToggle.bind(this)\r\n  }\r\n\r\n  handleToggle(venueId) {\r\n    if (venueId === null) {\r\n      this.setState({currentVenue: null})\r\n    } else {\r\n      this.setState({currentVenue: this.props.venues.filter(venue => venue.id === venueId)[0]})\r\n    }\r\n  }\r\n\r\n  setLatLng(lat, lng) {\r\n    return {lat: lat, lng: lng}\r\n  }\r\n\r\n  render() {\r\n    const center = this.setLatLng(this.props.map.latitude, this.props.map.longitude)\r\n    return (\r\n      <GoogleMap\r\n        defaultZoom={this.props.map.defaultZoom}\r\n        center={center}\r\n      >\r\n        <Circle\r\n          center={center}\r\n          radius={this.props.map.excludeRadius}\r\n          options={{\r\n            fillColor: 'gray',\r\n            fillOpacity: 0.75,\r\n            strokeColor: 'red',\r\n            strokeWeight: 2\r\n          }}\r\n        />\r\n        {this.state.currentVenue && <VenueInfo\r\n          {...this.state.currentVenue}\r\n          closeInfo={this.handleToggle}\r\n        />}\r\n        {this.props.venues.map(venue => <VenueMarker\r\n          {...venue}\r\n          key={venue.id}\r\n          openInfo={this.handleToggle}\r\n        />)}\r\n      </GoogleMap>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst BurgerMap = withScriptjs(withGoogleMap(Map))\r\nexport default BurgerMap;","import React, { Component } from 'react'\r\nimport BurgerMap from './BurgerMap'\r\n\r\nexport default class BurgerMapContainer extends Component {\r\n  render() {\r\n    return (\r\n      <BurgerMap\r\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${this.props.map.apiKey}&libraries=geometry,drawing`}\r\n        containerElement={<div className={'BurgerMap container'} />}\r\n        loadingElement={<div className={'BurgerMap loading'} />}\r\n        mapElement={<div className={'BurgerMap map'} />}\r\n        {...this.props}\r\n      />\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\nimport Venue from '../Venue/Venue'\nimport BurgerMapContainer from './BurgerMap/BurgerMapContainer'\nimport logo from './logo.svg'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      venues: []\n    }\n  }\n\n  componentDidMount() {\n    const foursquare = require('react-foursquare')(this.props.foursquareCredentials)\n    foursquare.venues.getVenues({\n      ll: `${this.props.location.latitude},${this.props.location.longitude}`,\n      ...this.props.venueRequest\n    }).then(data => {\n      this.setState({\n        venues: data.response.venues\n          .filter(venue => venue.location.distance > this.props.map.excludeRadius)\n          .sort((a, b) => a.location.distance - b.location.distance)\n      })\n    }).catch(reject => {\n      //do smth for catch\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Venues</h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <BurgerMapContainer\n          map={{\n            ...this.props.location,\n            ...this.props.map\n          }}\n          venues={this.state.venues}\n        />\n        <div className={'App-venues'}>\n          {this.state.venues.map(venue => <Venue\n            key={venue.id}\n            className={'Venue'}\n            {...venue}\n          />)}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst data = {\n  location: {\n    longitude: 26.7321094,\n    latitude: 58.3780494\n  },\n  map: {\n    apiKey: 'AIzaSyCvsl4tyOoCTMXkMFbdRgL_6G91ac025OU',\n    defaultZoom: 13,\n    excludeRadius: 1000\n  },\n  foursquareCredentials: {\n    clientID: 'EMYTVVVYZW3GSTVJQYFR5ZKJWCPS5D42G0HMYPWF0LLNWXGA',\n    clientSecret: 'CX1IT3OZP0TZ5IKLO1GVAQFLEJF3HWREXEBR50PFAMD5X4IZ'\n  },\n  venueRequest: {\n    categoryId: '4bf58dd8d48988d16c941735',\n    radius: 4000\n  }\n}\n\nReactDOM.render(<App {...data} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}