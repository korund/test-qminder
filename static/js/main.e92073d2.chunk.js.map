{"version":3,"sources":["components/App/logo.svg","components/Venue/Venue.js","components/BurgerMap/VenueMarker.js","components/BurgerMap/VenueInfo.js","components/BurgerMap/BurgerMap.js","components/BurgerMap/BurgerMapContainer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Venue","bgStyle","background","concat","this","props","photo","imgUrl","prefix","suffix","react_default","a","createElement","className","style","Component","VenueMarker","_this","lib","position","location","onClick","openInfo","id","VenueInfo","options","pixelOffset","width","height","onCloseClick","closeInfo","name","Map","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentVenue","handleToggle","bind","assertThisInitialized","venueId","setState","venues","filter","venue","lat","lng","_this2","center","setLatLng","map","latitude","longitude","defaultZoom","radius","excludeRadius","fillColor","fillOpacity","strokeColor","strokeWeight","VenueInfo_VenueInfo","assign","VenueMarker_VenueMarker","key","BurgerMap","withScriptjs","withGoogleMap","BurgerMapContainer","components_BurgerMap_BurgerMap","googleMapURL","apiKey","containerElement","loadingElement","mapElement","App","foursquare","require","foursquareCredentials","requestVenues","getVenues","objectSpread","ll","venueRequest","catch","reject","console","error","then","venuesResponse","expectedVenues","response","distance","Promise","all","getVenuePhotos","venuePhotoRequest","venue_id","res","forEach","index","photos","items","undefined","sort","b","src","logo","alt","BurgerMapContainer_BurgerMapContainer","components_Venue_Venue","Boolean","window","hostname","match","ReactDOM","render","components_App_App","clientID","clientSecret","categoryId","limit","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uQC+BzBC,mLAjBX,IAAMC,EAAU,CACdC,WAAU,iBAAAC,OAbF,uNAaE,mBAEZ,GAAgC,qBAArBC,KAAKC,MAAMC,MAAuB,CAC3C,IAAMC,EAASH,KAAKC,MAAMC,MAAME,OAAS,UAAYJ,KAAKC,MAAMC,MAAMG,OACtER,EAAQC,WAAR,OAAAC,OAA4BI,EAA5B,kBAEF,OACEG,EAAAC,EAAAC,cAAA,OACEC,UAAW,kBACXC,MAAOb,WApBKc,6BCDCC,mLACV,IAAAC,EAAAb,KACP,OAAOM,EAAAC,EAAAC,cAACM,EAAA,OAAD,CACLC,SAAUf,KAAKC,MAAMe,SACrBC,QAAS,kBAAMJ,EAAKZ,MAAMiB,SAASL,EAAKZ,MAAMkB,cAJXR,aCApBS,mLACV,IAAAP,EAAAb,KACP,OAAOM,EAAAC,EAAAC,cAACM,EAAA,WAAD,CACLC,SAAUf,KAAKC,MAAMe,SACrBK,QAAS,CACPC,YAAa,CACXC,MAAO,EACPC,QAAS,KAGbC,aAAc,kBAAMZ,EAAKZ,MAAMyB,UAAU,QAEzCpB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACdH,EAAAC,EAAAC,cAAA,UAAKR,KAAKC,MAAM0B,eAbehB,aCGjCiB,sBACJ,SAAAA,EAAY3B,GAAO,IAAAY,EAAA,OAAAgB,OAAAC,EAAA,EAAAD,CAAA7B,KAAA4B,IACjBf,EAAAgB,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAjC,KAAMC,KACDiC,MAAQ,CACXC,aAAc,MAEhBtB,EAAKuB,aAAevB,EAAKuB,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAhB,KALHA,4EAQN0B,GACK,OAAZA,EACFvC,KAAKwC,SAAS,CAACL,aAAc,OAE7BnC,KAAKwC,SAAS,CAACL,aAAcnC,KAAKC,MAAMwC,OAAOC,OAAO,SAAAC,GAAK,OAAIA,EAAMxB,KAAOoB,IAAS,uCAI/EK,EAAKC,GACb,MAAO,CAACD,IAAKA,EAAKC,IAAKA,oCAGhB,IAAAC,EAAA9C,KACD+C,EAAS/C,KAAKgD,UAAUhD,KAAKC,MAAMgD,IAAIC,SAAUlD,KAAKC,MAAMgD,IAAIE,WACtE,OACE7C,EAAAC,EAAAC,cAACM,EAAA,UAAD,CACEsC,YAAapD,KAAKC,MAAMgD,IAAIG,YAC5BL,OAAQA,GAERzC,EAAAC,EAAAC,cAACM,EAAA,OAAD,CACEiC,OAAQA,EACRM,OAAQrD,KAAKC,MAAMgD,IAAIK,cACvBjC,QAAS,CACPkC,UAAW,OACXC,YAAa,IACbC,YAAa,MACbC,aAAc,KAGjB1D,KAAKkC,MAAMC,cAAgB7B,EAAAC,EAAAC,cAACmD,EAAD9B,OAAA+B,OAAA,GACtB5D,KAAKkC,MAAMC,aADW,CAE1BT,UAAW1B,KAAKoC,gBAEjBpC,KAAKC,MAAMwC,OAAOQ,IAAI,SAAAN,GAAK,OAAIrC,EAAAC,EAAAC,cAACqD,EAADhC,OAAA+B,OAAA,GAC1BjB,EAD0B,CAE9BmB,IAAKnB,EAAMxB,GACXD,SAAU4B,EAAKV,0BA7CPzB,cAsDHoD,EADGC,uBAAaC,wBAAcrC,ICxDxBsC,mLAEjB,OACE5D,EAAAC,EAAAC,cAAC2D,EAADtC,OAAA+B,OAAA,CACEQ,aAAY,+CAAArE,OAAiDC,KAAKC,MAAMgD,IAAIoB,OAAhE,+BACZC,iBAAkBhE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,wBAClC8D,eAAgBjE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,sBAChC+D,WAAYlE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,mBACxBT,KAAKC,eAR+BU,+BCoEjC8D,sBAhEb,SAAAA,EAAYxE,GAAO,IAAAY,EAAA,OAAAgB,OAAAC,EAAA,EAAAD,CAAA7B,KAAAyE,IACjB5D,EAAAgB,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAA4C,GAAAxC,KAAAjC,KAAMC,KACDyE,WAAaC,EAAQ,IAARA,CAA4B9D,EAAKZ,MAAM2E,uBACzD/D,EAAKqB,MAAQ,CACXO,OAAQ,IAJO5B,mFASjBb,KAAK6E,wDAIS,IAAA/B,EAAA9C,KACdA,KAAK0E,WAAWjC,OAAOqC,UAAvBjD,OAAAkD,EAAA,EAAAlD,CAAA,CACEmD,GAAE,GAAAjF,OAAKC,KAAKC,MAAMe,SAASkC,SAAzB,KAAAnD,OAAqCC,KAAKC,MAAMe,SAASmC,YACxDnD,KAAKC,MAAMgF,eACbC,MAAM,SAAAC,GACPC,QAAQC,MAAMF,KACbG,KAAK,SAAAC,GACN,IAAMC,EAAiBD,EAAeE,SAAShD,OAC5CC,OAAO,SAAAC,GAAK,OAAIA,EAAM3B,SAAS0E,SAAW5C,EAAK7C,MAAMgD,IAAIK,gBAC5DqC,QAAQC,IAAIJ,EACTvC,IAAI,SAAAN,GAAK,OAAIG,EAAK4B,WAAWjC,OAAOoD,eAAvBhE,OAAAkD,EAAA,EAAAlD,CAAA,GACTiB,EAAK7C,MAAM6F,kBADF,CAEZC,SAAUpD,EAAMxB,SAElBmE,KAAK,SAAAU,GACLR,EAAeS,QAAQ,SAACtD,EAAOuD,GAAR,OAAkBV,EAAeU,GAAfrE,OAAAkD,EAAA,EAAAlD,CAAA,GACpCc,EADoC,CAEvCzC,MAAQ8F,EAAIE,GAAOT,SAASU,OAASH,EAAIE,GAAOT,SAASU,OAAOC,MAAM,QAAKC,MAE7EvD,EAAKN,SAAS,CACZC,OAAQ+C,EAAec,KAAK,SAAC/F,EAAGgG,GAAJ,OAAUhG,EAAES,SAAS0E,SAAWa,EAAEvF,SAAS0E,kDAO7E,OACEpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,OAAKgG,IAAKC,IAAMhG,UAAU,WAAWiG,IAAI,UAE3CpG,EAAAC,EAAAC,cAACmG,EAAD,CACE1D,IAAGpB,OAAAkD,EAAA,EAAAlD,CAAA,GACE7B,KAAKC,MAAMe,SACXhB,KAAKC,MAAMgD,KAEhBR,OAAQzC,KAAKkC,MAAMO,SAErBnC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,cACbT,KAAKkC,MAAMO,OAAOQ,IAAI,SAAAN,GAAK,OAAIrC,EAAAC,EAAAC,cAACoG,EAAD/E,OAAA+B,OAAA,CAC9BE,IAAKnB,EAAMxB,IACPwB,eAzDEhC,cCIEkG,QACW,cAA7BC,OAAO9F,SAAS+F,UAEe,UAA7BD,OAAO9F,SAAS+F,UAEhBD,OAAO9F,SAAS+F,SAASC,MACvB,kECaNC,IAASC,OAAO5G,EAAAC,EAAAC,cAAC2G,EAvBJ,CACXnG,SAAU,CACRmC,UAAW,WACXD,SAAU,YAEZD,IAAK,CACHoB,OAAQ,0CACRjB,YAAa,GACbE,cAAe,KAEjBsB,sBAAuB,CACrBwC,SAAU,mDACVC,aAAc,oDAEhBpC,aAAc,CACZqC,WAAY,2BACZjE,OAAQ,KAEVyC,kBAAmB,CACjByB,MAAO,KAIwBC,SAASC,eAAe,SD4FrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.e92073d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nconst svgNoPic = `\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%'><text x='24%' y='56%' fill='dimgray' font-weight='bold' font-size='2rem' font-family='sans-serif'>NO PIC</text></svg>\"`\r\n\r\nclass Venue extends Component {\r\n  render() {\r\n    /*\r\n    const venueDetails = <div className={'Venue'}>\r\n      <p>\r\n        Name: {this.props.name}, Distance: {this.props.location.distance}<br/>\r\n        Location: {this.props.location.lat}, {this.props.location.lng}\r\n      </p>\r\n    </div>\r\n    */\r\n    const bgStyle = {\r\n      background: `lightgray url(${svgNoPic}) center/cover`\r\n    }\r\n    if (typeof this.props.photo !== 'undefined') {\r\n      const imgUrl = this.props.photo.prefix + '500x500' + this.props.photo.suffix\r\n      bgStyle.background = `url(${imgUrl}) center/cover`\r\n    }\r\n    return (\r\n      <div\r\n        className={'Venue-container'}\r\n        style={bgStyle}\r\n      >\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Venue;","import React, {Component} from 'react'\r\nimport {Marker} from 'react-google-maps'\r\n\r\nexport default class VenueMarker extends Component {\r\n  render() {\r\n    return <Marker\r\n      position={this.props.location}\r\n      onClick={() => this.props.openInfo(this.props.id)}\r\n    />\r\n  }\r\n}","import React, {Component} from 'react'\r\nimport {InfoWindow} from 'react-google-maps'\r\n\r\nexport default class VenueInfo extends Component {\r\n  render() {\r\n    return <InfoWindow\r\n      position={this.props.location}\r\n      options={{\r\n        pixelOffset: {\r\n          width: 0,\r\n          height: -40\r\n        }\r\n      }}\r\n      onCloseClick={() => this.props.closeInfo(null)}\r\n    >\r\n      <div className={'VenueInfo'}>\r\n        <h1>{this.props.name}</h1>\r\n      </div>\r\n    </InfoWindow>\r\n  }\r\n}","import React, {Component} from 'react'\r\nimport {withScriptjs, withGoogleMap, GoogleMap, Circle} from 'react-google-maps'\r\nimport VenueMarker from './VenueMarker'\r\nimport VenueInfo from './VenueInfo'\r\nimport './BurgerMap.css'\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      currentVenue: null\r\n    }\r\n    this.handleToggle = this.handleToggle.bind(this)\r\n  }\r\n\r\n  handleToggle(venueId) {\r\n    if (venueId === null) {\r\n      this.setState({currentVenue: null})\r\n    } else {\r\n      this.setState({currentVenue: this.props.venues.filter(venue => venue.id === venueId)[0]})\r\n    }\r\n  }\r\n\r\n  setLatLng(lat, lng) {\r\n    return {lat: lat, lng: lng}\r\n  }\r\n\r\n  render() {\r\n    const center = this.setLatLng(this.props.map.latitude, this.props.map.longitude)\r\n    return (\r\n      <GoogleMap\r\n        defaultZoom={this.props.map.defaultZoom}\r\n        center={center}\r\n      >\r\n        <Circle\r\n          center={center}\r\n          radius={this.props.map.excludeRadius}\r\n          options={{\r\n            fillColor: 'gray',\r\n            fillOpacity: 0.75,\r\n            strokeColor: 'red',\r\n            strokeWeight: 2\r\n          }}\r\n        />\r\n        {this.state.currentVenue && <VenueInfo\r\n          {...this.state.currentVenue}\r\n          closeInfo={this.handleToggle}\r\n        />}\r\n        {this.props.venues.map(venue => <VenueMarker\r\n          {...venue}\r\n          key={venue.id}\r\n          openInfo={this.handleToggle}\r\n        />)}\r\n      </GoogleMap>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst BurgerMap = withScriptjs(withGoogleMap(Map))\r\nexport default BurgerMap;","import React, { Component } from 'react'\r\nimport BurgerMap from './BurgerMap'\r\n\r\nexport default class BurgerMapContainer extends Component {\r\n  render() {\r\n    return (\r\n      <BurgerMap\r\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${this.props.map.apiKey}&libraries=geometry,drawing`}\r\n        containerElement={<div className={'BurgerMap container'} />}\r\n        loadingElement={<div className={'BurgerMap loading'} />}\r\n        mapElement={<div className={'BurgerMap map'} />}\r\n        {...this.props}\r\n      />\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\nimport Venue from '../Venue/Venue'\nimport BurgerMapContainer from '../BurgerMap/BurgerMapContainer'\nimport logo from './logo.svg'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.foursquare = require('react-foursquare')(this.props.foursquareCredentials)\n    this.state = {\n      venues: []\n    }\n  }\n\n  componentDidMount() {\n    this.requestVenues()\n  }\n\n  // request venues\n  requestVenues() {\n    this.foursquare.venues.getVenues({\n      ll: `${this.props.location.latitude},${this.props.location.longitude}`,\n      ...this.props.venueRequest\n    }).catch(reject => {\n      console.error(reject)\n    }).then(venuesResponse => {\n      const expectedVenues = venuesResponse.response.venues\n        .filter(venue => venue.location.distance > this.props.map.excludeRadius)\n      Promise.all(expectedVenues\n        .map(venue => this.foursquare.venues.getVenuePhotos({\n          ...this.props.venuePhotoRequest,\n          venue_id: venue.id\n        }))\n      ).then(res => {\n        expectedVenues.forEach((venue, index) => expectedVenues[index] = {\n          ...venue,\n          photo: (res[index].response.photos ? res[index].response.photos.items[0] : undefined)\n        })\n        this.setState({\n          venues: expectedVenues.sort((a, b) => a.location.distance - b.location.distance)\n        })\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Venues</h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <BurgerMapContainer\n          map={{\n            ...this.props.location,\n            ...this.props.map\n          }}\n          venues={this.state.venues}\n        />\n        <div className={'App-venues'}>\n          {this.state.venues.map(venue => <Venue\n            key={venue.id}\n            {...venue}\n          />)}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst data = {\n  location: {\n    longitude: 26.7321094,\n    latitude: 58.3780494\n  },\n  map: {\n    apiKey: 'AIzaSyCvsl4tyOoCTMXkMFbdRgL_6G91ac025OU',\n    defaultZoom: 13,\n    excludeRadius: 1000\n  },\n  foursquareCredentials: {\n    clientID: 'EMYTVVVYZW3GSTVJQYFR5ZKJWCPS5D42G0HMYPWF0LLNWXGA',\n    clientSecret: 'CX1IT3OZP0TZ5IKLO1GVAQFLEJF3HWREXEBR50PFAMD5X4IZ'\n  },\n  venueRequest: {\n    categoryId: '4bf58dd8d48988d16c941735',\n    radius: 4000\n  },\n  venuePhotoRequest: {\n    limit: 1\n  }\n}\n\nReactDOM.render(<App {...data} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}